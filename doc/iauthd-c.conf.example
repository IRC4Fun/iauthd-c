/* Informally, the grammar of this file is as follows:
 *
 * file: contents
 * contents: ( contents ';'|'\n' )? string value
 * string: quoted string; or unquoted sequence of letters, digits,
 *   '-', '.', '_' and '#'
 * value: string | inaddr | stringlist | object
 * inaddr: string string, representing host name and port number or name
 * stringlist: '(' ( ( string ',' )* string )? ')'
 *   | ( string ',' ( string ',' )* string )
 * object: '{' contents '}'
 *
 * Comments can be either C or C++ style.
 */

core {
    // You may want a library-path line if you run iauthd-c from a build tree.
    // The default is <PREFIX>/lib/iauthd-c .
    // Note that these must be string lists, not bare strings;
    // if only one value is specified, it must use parentheses.
    // library_path ( "/home/myuser/iauthd-c/modules/.libs" )
    modules ( iauth_xquery )
}

logs {
    // Contents in this section have names that consist of a facility
    // name, a period, and a severity name or range.  Some facility
    // names, and all of the severities, are listed below.  The values
    // are either target names or lists of target names.  A log target
    // consists of a method, a colon, and method-specific options.

    // Predefined core log facilities are: core, config, resolver, *.
    // The facility named * receives all messages.

    // The log severities, from least to most severe, are: debug,
    // command, info, warning, error, fatal.

    // Supported log methods: file (with file names relative to
    // /usr/local/log/).

    "*.>=info" "file:iauthd-c.log"
}

iauth {
    // This indicates the number of seconds before IAuth tries to
    // accept a client even if some modules might not have all the
    // data they want.  (To be precise, this many seconds after an
    // IAuth request is created, the client will be accepted if only
    // "soft" holds remain.)  With ircu2.10.12.15 and later, this
    // can safely be removed; with earlier versions, that will cause
    // Authorization Timeout rejections instead of accepting the
    // clients.
    timeout 30
}

iauth_xquery {
    // Each "key" is an XQUERY-compatible server name; its value is
    // the XQUERY protocol to use with it.  The following protocols
    // are supported (see modules/iauth_xquery.c for details about
    // the exchanges):
    //  - login
    //  - login-ipr
    //  - dronecheck
    //  - combined (almost like dronecheck plus login-ipr)
    channels.example.org login-ipr
    botcheck.example.org dronecheck
}

iauth_class {
    // Each map/object in this defines one rule.  The values within
    // each rule define either the criteria for the rule to match or
    // the class to assign clients to.  Rules are considered in
    // alphabetic order by keys, as determined by strcasecmp(3), all
    // criteria for a rule must match for the client to be assigned
    // to the specified class, and rule evaluations stop once a class
    // is assigned to the client.  If no criteria are listed, the rule
    // will pass for all clients who reach it.  If no class name is
    // listed, the rule name is used as the class name, but this is
    // seldom useful because the class names are usually not in the
    // same order one would want to check rules.
    "r001" {
        class trusted
        username "joe-oper"
        address "127.0.0.0/8"
    }
    "r002" { class trusted; account ircoper }
    "r003" { class clients; xreply_ok "euworld.example.org" }
    "r004" { class default_clients }
}
